priority 1
# ------------------
# Language
# ------------------
snippet len "length (len)" i
Length
endsnippet

snippet nimp "NotImplementedException" b
throw new System.NotImplementedException("Not implemented.");
endsnippet

snippet obsolete "Obsolete" b
[System.Obsolete("Please use ${1} instead.")]
endsnippet

snippet pr "private readonly" b
private readonly 
endsnippet

snippet priv "private" i
private 
endsnippet

snippet pub "public" b
public 
endsnippet

snippet pubv "public void" b
public void 
endsnippet

snippet ret "return" w
return 
endsnippet

snippet rett "return value" w
return ${1};
endsnippet

snippet ro "readonly" w
readonly 
endsnippet

snippet vd "void" i
void 
endsnippet

snippet wr "Console.WriteLine" b
System.Console.WriteLine("$1");
endsnippet

snippet sys "System" i
System.
endsnippet

snippet sysd "System.Diagnostics" i
using static System.Diagnostics.Debug;
endsnippet

# ------------------
# Asserts
# ------------------
snippet as "assert (as)" b
Assert(${1:false});
endsnippet

snippet asm "assert with message (asm)" b
Assert(${1:/*condition*/}, "${2:error message}");
endsnippet

snippet asn "assert not null (asn)" b
Assert(${1:} != null);
endsnippet


# ------------------
# String
# ------------------

snippet snoe "IsNullOrEmpty" i
string.IsNullOrEmpty(${1:string})
endsnippet

snippet strf "Format" i
string.Format(${1:string})
endsnippet

snippet stre "string.Empty" w
string.Empty
endsnippet

snippet ts "ToString" i
ToString()
endsnippet

# ------------------
#  branching
# ------------------
snippet case "case" b
case ${1:value}:
	$2
	break;
endsnippet

snippet el "else (el)" w
else
{
	${VISUAL}${1:/*code*/}
}
endsnippet

snippet elif "else if" w
else if ($1)
{
	$0
}
endsnippet

snippet if "if ()" b
if (${1:/*condition*/})
{
	${VISUAL}${2:/*code*/}
}
${3}
endsnippet

snippet ife "if else statement" b
if ($1)
{
	${VISUAL}$2
}
else
{
	$3
}
endsnippet

snippet ifnn "if not null" b
if ($1 != null)
{
	${VISUAL}$0
}
endsnippet

snippet sw "switch statement" b
switch (${1:statement})
{
	case ${2:value}:
		break;

	default:
		$0break;
}
endsnippet

# ------------------
#  loops
# ------------------
snippet do "do loop" b
do
{
	${VISUAL}$0
}
while (${1:true});
endsnippet

snippet for "for (for)" b
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0:/*code*/}
}
endsnippet

snippet fore "foreach loop" b
foreach (${3:var} ${2:item} in ${1:items})
{
	${VISUAL}$0
}
endsnippet

snippet fori "for (int i...) (fori)" b
for (int i = 0; i < ${1:count}; ++i)
{
	${VISUAL}${0:/*code*/}
}
endsnippet

snippet wh "while loop" b
while (${1:true})
{
	${VISUAL}$0
}
endsnippet

# ------------------
# Type definitions
# ------------------
snippet class "class" w
public class ${1:MyClass}
{
	$0
}
endsnippet

snippet enum "enumeration" b
enum ${1:MyEnum}
{
	${2:Item},
};
endsnippet

snippet interface "interface" w
public interface I${1:Interface}
{
	$0
}
endsnippet

snippet struct "struct" w
public struct ${1:MyStruct}
{
	$0
}
endsnippet

# ------------------
# Funtion
# ------------------
snippet fun "function definition (fun)" i
${1:void} ${2:/*function name*/}(${3:/*args*/})
{
	${VISUAL}${4:/*code*/}
}
endsnippet

snippet func "void function definition (void)" i
void ${1:/*function name*/}(${2:/*args*/})
{
	${VISUAL}${3:/*code*/}
}
endsnippet

snippet funp "public function definition (fun)" b
public ${1:void} ${2:/*function name*/}(${3:/*args*/})
{
	${VISUAL}${4:/*code*/}
}
endsnippet

snippet get "Property with a private setter" b
public ${1:int} ${2:MyProperty} { get; private set; }
endsnippet

snippet getset "Simple property declaration" b
public ${1:int} ${2:MyProperty} { get; set; }
endsnippet

snippet getsetf "Full property declaration" b
private ${1:int} ${2:_myProperty};

public $1 ${3:MyProperty}
{
	get { return $2; }
	set { $2 = value; }
}
endsnippet

snippet main "static void main" b
public static void Main(string[] args)
{
	${VISUAL}${0: /*code*/}
}
endsnippet

snippet maini "static int main" b
public static int Main(string[] args)
{
	${VISUAL}${0: /*code*/}
}
endsnippet

# ------------------
# Usings
# ------------------
snippet uscg "using System.Collections.Generic" b
using System.Collections.Generic;
endsnippet

snippet usi "using System.IO" b
using System.IO;
endsnippet

snippet utt "using System.Threading.Tasks" b
using System.Threading.Tasks;
endsnippet

snippet ulinq "using System.Linq" b
using System.Linq;
endsnippet

snippet ununit "using NUnit Framework" b
using NUnit.Framework;
endsnippet

# ------------------
#  Events
# ------------------
snippet event
public event System.EventHandler ${1:name};
endsnippet

snippet evente "EventArgs.Empty" i
System.EventArgs.Empty
endsnippet

snippet eventon
protected virtual void On$1(System.EventArgs e) 
{
	var handler = $1;
	if (handler != null)
	{
		handler(this, e);
	}
}
endsnippet

snippet eventd "(o, e) =>" i
+= (o, e) => $1
endsnippet

# ------------------
#  Exception handling
# ------------------
snippet try "try/catch (try)" b
try
{
	${VISUAL}${1:/*code to try*/}
}
catch (${2:System}.Exception ex)
{
	${3:/*handle exception*/}
}
endsnippet

snippet tryf "try/catch/finally (tryf)" b
try
{
	${VISUAL}${1:/*code to try*/}
}
catch (${2}Exception e)
{
	${3:/*handle exception*/}
}
finally
{
	${4:/*cleanup*/}
}
endsnippet

snippet catch "catch (catch)" w
catch (${1}Exception e)
{
	${2:/*handle exception*/}
}
endsnippet

snippet thr "throw (thr)" w
throw new ${1}Exception("${2}");
endsnippet

# ------------------
# Comments
# ------------------
snippet fix "fix"
// O-FIXME: ${VISUAL}$0
endsnippet

snippet todo "TODO (todo)" b
// TODO: ${1}
endsnippet

snippet sdoc "short doc block (sdoc)" b
/**
 * ${1:description}
 */
endsnippet

snippet doff "indent off" b
// *INDENT-OFF*
endsnippet

snippet don "indent on" b
// *INDENT-ON*
endsnippet

# ------------------
# log4net
# ------------------
snippet log
private static readonly log4net.ILog log =
	log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
endsnippet

snippet ld
if (log.IsDebugEnabled) log.Debug("${1:msg}");
endsnippet

snippet ldf
if (log.IsDebugEnabled) log.DebugFormat("${1:msg}");
endsnippet

snippet li
if (log.IsInfoEnabled) log.Info("${1:msg}");
endsnippet

snippet lif
if (log.IsInfoEnabled) log.InfoFormat("${1:msg}");
endsnippet

snippet lw
if (log.IsWarnEnabled) log.Warn("${1:msg}");
endsnippet

snippet lwf
if (log.IsWarnEnabled) log.WarnFormat("${1:msg}");
endsnippet

snippet le
if (log.IsErrorEnabled) log.Error("${1:msg}");
endsnippet

snippet lef
if (log.IsErrorEnabled) log.ErrorFormat("${1:msg}");
endsnippet

snippet lf
if (log.IsFatalEnabled) log.Fatal("${1:msg}");
endsnippet

snippet lff
if (log.IsFatalEnabled) log.FatalFormat("${1:msg}");
endsnippet

# ------------------
# NUnit
# ------------------
snippet asempty "Is empty" b
Assert.That(${1:string}, Is.Empty);
endsnippet

snippet asf "Is false" b
Assert.That(${1}, Is.False);
endsnippet

snippet asgt "Is greater than" b
Assert.That(${1}, Is.GreaterThan(${2}));
endsnippet

snippet asgte "Is greater than or equal" b
Assert.That(${1}, Is.GreaterThanOrEqualTo(${2}));
endsnippet

snippet aslt "Is less than" b
Assert.That(${1}, Is.LessThan(${2}));
endsnippet

snippet aslte "Is less than or equal" b
Assert.That(${1}, Is.LessThanOrEqualTo(${2}));
endsnippet

snippet asnempty "Is not empty" b
Assert.That(${1:string}, Is.Not.Empty);
endsnippet

snippet asnnull "Is not null" b
Assert.That(${1:obj}, Is.Not.Null);
endsnippet

snippet asnull "Is null" b
Assert.That(${1:obj}, Is.Null);
endsnippet

snippet ast "Is true" b
Assert.That(${1}, Is.True);
endsnippet

snippet asth "Assert throw" b
Assert.That(() => ${1:method}, Throws.TypeOf<${2:exception}>());
endsnippet

snippet aseq "Assert EqualTo" b
Assert.That(${1:actual}, Is.EqualTo(${2:expected}));
endsnippet

snippet asneq "Assert Not EqualTo" b
Assert.That(${1:actual}, Is.Not.EqualTo(${2:expected}));
endsnippet


snippet exp "Explicit" b
[Explicit]
endsnippet

snippet ignore "Ignore" b
[Ignore("${1:why}")]
endsnippet

snippet setcul "Set culture" b
[SetCulture("it-IT")]
endsnippet

snippet test "Test" b
[Test]public void ${1:Name}() {
	$2
}
endsnippet

snippet testcase "Test case" b
[TestCase(${1:args})]
endsnippet

snippet testfix "Test fixture" b
[TestFixture]
endsnippet

# ------------------
# Ploeh.Autofixture
# ------------------
snippet autonew "new Fixture" b
var fixture = new Fixture();
endsnippet

snippet autocreate "Create Fixture" b
var ${1:var} = fixture.Create<${2:interface}>();
endsnippet

# ------------------
# Nsubstitue
# ------------------
snippet ssub "Substitute.For" b
var ${1:var} = Substitute.For<${2:interface}>();
endsnippet

snippet sevent "Raise.Event" b
${1:event} += Raise.EventWith(null, System.EventArgs.Empty);
endsnippet

snippet sany "Arg.Any" i
Arg.Any<${1:arg}>()
endsnippet

snippet sis "Arg.Is" i
Arg.Is<${1:arg}>(v => ${2})
endsnippet

snippet sret "Returns" i
Returns(${1});
endsnippet

snippet sreta "ReturnsForAnyArgs" i
ReturnsForAnyArgs(${1});
endsnippet

snippet srec "Received" i
Received().$1
endsnippet

snippet snrec "DidNotReceived" i
DidNotReceive().$1
endsnippet

# ------------------
# Extensions
# ------------------
snippet with "With" w
"${1:/*format string*/}".With(${0:/*values*/})
endsnippet


# ------------------
# Contracts
# ------------------
snippet req "Guard condition"
Requires.IsNotNull(${1:var}, "$1");
this.$1 = $1;
endsnippet

snippet reqn "Requires not null" b
Requires.IsNotNull(${1:var}, "$1");
endsnippet

snippet reqne "Requires not null or empty" b
Requires.IsNotNullOrEmpty(${1:var}, "$1");
endsnippet

snippet reqt "Requires that" b
Requires.That(${1:cond}, "$1");

endsnippet

snippet ensn "Ensures not null" b
Ensures.IsNotNull(${1:var}, "$1");
endsnippet

snippet ensne "Ensures not null or empty" b
Ensures.IsNotNullOrEmpty(${1:var}, "$1");
endsnippet

snippet enst "Ensures that" b
Ensures.That(${1:cond}, "$1");
endsnippet

snippet ensnr "Ensures not reached" b
Ensures.NotReached();
endsnippet

# ------------------
# Should
# ------------------
snippet seq "shouldEqual (seq)" w
ShouldEqual(${1:/*to*/});
endsnippet

snippet sneq "shouldNotEqual (sneq)" w
ShouldNotEqual(${1:/*to*/});
endsnippet

snippet st "shouldBeTrue (st)" w
ShouldBeTrue();
endsnippet

snippet sf "shouldBeFalse (sf)" w
ShouldBeFalse();
endsnippet

snippet sn "shouldBeNull (sn)" w
ShouldBeNull();
endsnippet

snippet snn "shouldNotBeNull (snn)" w
ShouldNotBeNull();
endsnippet

snippet sne "shouldNotBeNullOrEmpty (sne)" w
ShouldNotBeNullOrEmpty();
endsnippet
